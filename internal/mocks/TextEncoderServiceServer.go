// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	textencoderpb "fast-search/internal/infrastructure/encoder/textencoderpb"

	mock "github.com/stretchr/testify/mock"
)

// TextEncoderServiceServer is an autogenerated mock type for the TextEncoderServiceServer type
type TextEncoderServiceServer struct {
	mock.Mock
}

// EncodeText provides a mock function with given fields: _a0, _a1
func (_m *TextEncoderServiceServer) EncodeText(_a0 context.Context, _a1 *textencoderpb.TextRequest) (*textencoderpb.VectorResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for EncodeText")
	}

	var r0 *textencoderpb.VectorResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *textencoderpb.TextRequest) (*textencoderpb.VectorResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *textencoderpb.TextRequest) *textencoderpb.VectorResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*textencoderpb.VectorResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *textencoderpb.TextRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedTextEncoderServiceServer provides a mock function with given fields:
func (_m *TextEncoderServiceServer) mustEmbedUnimplementedTextEncoderServiceServer() {
	_m.Called()
}

// NewTextEncoderServiceServer creates a new instance of TextEncoderServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTextEncoderServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TextEncoderServiceServer {
	mock := &TextEncoderServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
